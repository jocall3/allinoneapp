import React from 'react';
import type { Feature } from '../../types.ts';
import { RAW_FEATURES } from '../../constants.ts';
import { lazyWithRetry } from '../../services/index.ts';
// FIX: The placeholder is no longer needed as all features will be implemented.
// import { PlaceholderFeature } from './shared/PlaceholderFeature.tsx';

// A map of feature IDs to their lazy-loaded component import function and export name.
// This only includes features that have an actual implementation.
const implementedFeatures: Record<string, { loader: () => Promise<{ [key: string]: React.FC<any> }>, exportName: string }> = {
    'ai-command-center': { loader: () => import('./AiCommandCenter.tsx'), exportName: 'AiCommandCenter' },
    'project-explorer': { loader: () => import('./ProjectExplorer.tsx'), exportName: 'ProjectExplorer' },
    'connections': { loader: () => import('./Connections.tsx'), exportName: 'Connections' },
    'ai-code-explainer': { loader: () => import('./AiCodeExplainer.tsx'), exportName: 'AiCodeExplainer' },
    'ai-feature-builder': { loader: () => import('./AiFeatureBuilder.tsx'), exportName: 'AiFeatureBuilder' },
    'regex-sandbox': { loader: () => import('./RegexSandbox.tsx'), exportName: 'RegexSandbox' },
    'portable-snippet-vault': { loader: () => import('./SnippetVault.tsx'), exportName: 'SnippetVault' },
    'css-grid-editor': { loader: () => import('./CssGridEditor.tsx'), exportName: 'CssGridEditor' },
    'ai-commit-generator': { loader: () => import('./AiCommitGenerator.tsx'), exportName: 'AiCommitGenerator' },
    'json-tree-navigator': { loader: () => import('./JsonTreeNavigator.tsx'), exportName: 'JsonTreeNavigator' },
    'xbrl-converter': { loader: () => import('./XbrlConverter.tsx'), exportName: 'XbrlConverter' },
    'ai-unit-test-generator': { loader: () => import('./AiUnitTestGenerator.tsx'), exportName: 'AiUnitTestGenerator' },
    'prompt-craft-pad': { loader: () => import('./PromptCraftPad.tsx'), exportName: 'PromptCraftPad' },
    'linter-formatter': { loader: () => import('./CodeFormatter.tsx'), exportName: 'CodeFormatter' },
    'schema-designer': { loader: () => import('./SchemaDesigner.tsx'), exportName: 'SchemaDesigner' },
    'pwa-manifest-editor': { loader: () => import('./PwaManifestEditor.tsx'), exportName: 'PwaManifestEditor' },
    'markdown-slides-generator': { loader: () => import('./MarkdownSlides.tsx'), exportName: 'MarkdownSlides' },
    'screenshot-to-component': { loader: () => import('./ScreenshotToComponent.tsx'), exportName: 'ScreenshotToComponent' },
    'digital-whiteboard': { loader: () => import('./DigitalWhiteboard.tsx'), exportName: 'DigitalWhiteboard' },
    'theme-designer': { loader: () => import('./ThemeDesigner.tsx'), exportName: 'ThemeDesigner' },
    'svg-path-editor': { loader: () => import('./SvgPathEditor.tsx'), exportName: 'SvgPathEditor' },
    'ai-style-transfer': { loader: () => import('./AiStyleTransfer.tsx'), exportName: 'AiStyleTransfer' },
    'ai-coding-challenge': { loader: () => import('./AiCodingChallenge.tsx'), exportName: 'AiCodingChallenge' },
    'typography-lab': { loader: () => import('./TypographyLab.tsx'), exportName: 'TypographyLab' },
    'code-review-bot': { loader: () => import('./CodeReviewBot.tsx'), exportName: 'CodeReviewBot' },
    'ai-pull-request-assistant': { loader: () => import('./AiPullRequestAssistant.tsx'), exportName: 'AiPullRequestAssistant' },
    'changelog-generator': { loader: () => import('./ChangelogGenerator.tsx'), exportName: 'ChangelogGenerator' },
    'cron-job-builder': { loader: () => import('./CronJobBuilder.tsx'), exportName: 'CronJobBuilder' },
    'ai-code-migrator': { loader: () => import('./AiCodeMigrator.tsx'), exportName: 'AiCodeMigrator' },
    'visual-git-tree': { loader: () => import('./VisualGitTree.tsx'), exportName: 'VisualGitTree' },
    'worker-thread-debugger': { loader: () => import('./WorkerThreadDebugger.tsx'), exportName: 'WorkerThreadDebugger' },
    'ai-image-generator': { loader: () => import('./AiImageGenerator.tsx'), exportName: 'AiImageGenerator' },
    'async-call-tree-viewer': { loader: () => import('./AsyncCallTreeViewer.tsx'), exportName: 'AsyncCallTreeViewer' },
    'audio-to-code': { loader: () => import('./AudioToCode.tsx'), exportName: 'AudioToCode' },
    'code-diff-ghost': { loader: () => import('./CodeDiffGhost.tsx'), exportName: 'CodeDiffGhost' },
    'code-spell-checker': { loader: () => import('./CodeSpellChecker.tsx'), exportName: 'CodeSpellChecker' },
    'color-palette-generator': { loader: () => import('./ColorPaletteGenerator.tsx'), exportName: 'ColorPaletteGenerator' },
    'logic-flow-builder': { loader: () => import('./LogicFlowBuilder.tsx'), exportName: 'LogicFlowBuilder' },
    'meta-tag-editor': { loader: () => import('./MetaTagEditor.tsx'), exportName: 'MetaTagEditor' },
    'network-visualizer': { loader: () => import('./NetworkVisualizer.tsx'), exportName: 'NetworkVisualizer' },
    'responsive-tester': { loader: () => import('./ResponsiveTester.tsx'), exportName: 'ResponsiveTester' },
    'sass-scss-compiler': { loader: () => import('./SassScssCompiler.tsx'), exportName: 'SassScssCompiler' },
    'ai-story-scaffolding': { loader: () => import('./AiStoryScaffolding.tsx'), exportName: 'AiStoryScaffolding' },
    'omnistruct-framework': { loader: () => import('./OmniStructFramework.tsx'), exportName: 'OmniStructFramework' },
    'alchemy-studio': { loader: () => import('../../alchemy/AlchemyStudio.tsx'), exportName: 'AlchemyStudio' },
    'context-aware-command-suggestions': { loader: () => import('./ContextAwareCommandSuggestions.tsx'), exportName: 'ContextAwareCommandSuggestions' },
    'natural-language-workflow-chaining': { loader: () => import('./NaturalLanguageWorkflowChaining.tsx'), exportName: 'NaturalLanguageWorkflowChaining' },
    'voice-command-integration': { loader: () => import('./VoiceCommandIntegration.tsx'), exportName: 'VoiceCommandIntegration' },
    'sentiment-aware-response-generation': { loader: () => import('./SentimentAwareResponseGeneration.tsx'), exportName: 'SentimentAwareResponseGeneration' },
    'proactive-problem-identification': { loader: () => import('./ProactiveProblemIdentification.tsx'), exportName: 'ProactiveProblemIdentification' },
    'explain-this-ui-element': { loader: () => import('./ExplainThisUiElement.tsx'), exportName: 'ExplainThisUiElement' },
    'smart-archive-assistant': { loader: () => import('./SmartArchiveAssistant.tsx'), exportName: 'SmartArchiveAssistant' },
    'ai-powered-file-renaming': { loader: () => import('./AiPoweredFileRenaming.tsx'), exportName: 'AiPoweredFileRenaming' },
    'ai-driven-file-integrity-checks': { loader: () => import('./AiDrivenFileIntegrityChecks.tsx'), exportName: 'AiDrivenFileIntegrityChecks' },
    'find-similar-files': { loader: () => import('./FindSimilarFiles.tsx'), exportName: 'FindSimilarFiles' },
    'automated-screenshot-organization': { loader: () => import('./AutomatedScreenshotOrganization.tsx'), exportName: 'AutomatedScreenshotOrganization' },
    'find-broken-links-scan': { loader: () => import('./FindBrokenLinks.tsx'), exportName: 'FindBrokenLinks' },
    'automated-image-captioning': { loader: () => import('./AutomatedImageCaptioning.tsx'), exportName: 'AutomatedImageCaptioning' },
    'automated-code-documentation-generation': { loader: () => import('./AutomatedApiDocumentation.tsx'), exportName: 'AutomatedApiDocumentation' },
    'generate-boilerplate-context-menu': { loader: () => import('./GenerateBoilerplate.tsx'), exportName: 'GenerateBoilerplate' },
    'ai-driven-performance-bottleneck-id': { loader: () => import('./AiDrivenPerformanceBottleneckId.tsx'), exportName: 'AiDrivenPerformanceBottleneckId' },
    'convert-to-async-await-refactoring': { loader: () => import('./ConvertToAsyncAwait.tsx'), exportName: 'ConvertToAsyncAwait' },
    'ai-powered-security-vulnerability-scanning': { loader: () => import('./AiPoweredSecurityVulnerabilityScanning.tsx'), exportName: 'AiPoweredSecurityVulnerabilityScanning' },
    'ai-driven-database-query-generation': { loader: () => import('./GenerateDatabaseQuery.tsx'), exportName: 'GenerateDatabaseQuery' },
    'explain-this-error-message': { loader: () => import('./ExplainThisErrorMessage.tsx'), exportName: 'ExplainThisErrorMessage' },
    'ai-driven-code-complexity-visualization': { loader: () => import('./AiDrivenCodeComplexity.tsx'), exportName: 'AiDrivenCodeComplexity' },
    'suggest-better-variable-names': { loader: () => import('./SuggestBetterVariableNames.tsx'), exportName: 'SuggestBetterVariableNames' },
    'ai-powered-code-generation-for-accessibility': { loader: () => import('./GenerateAccessibleCode.tsx'), exportName: 'GenerateAccessibleCode' },
    'find-unused-code-scan': { loader: () => import('./FindUnusedCode.tsx'), exportName: 'FindUnusedCode' },
    'ai-powered-data-visualization-generation': { loader: () => import('./AiDataVisualizationGeneration.tsx'), exportName: 'AiDataVisualizationGeneration' },
    'generate-mock-data-command': { loader: () => import('./GenerateMockData.tsx'), exportName: 'GenerateMockData' },
    'generate-design-system-tokens': { loader: () => import('./GenerateDesignSystemTokens.tsx'), exportName: 'GenerateDesignSystemTokens' },
    'ai-driven-data-anonymization-service': { loader: () => import('./AiDataAnonymization.tsx'), exportName: 'AiDataAnonymization' },
    'automated-task-list-generation-from-notes': { loader: () => import('./AutomatedTaskGeneration.tsx'), exportName: 'AutomatedTaskGeneration' },
    'ai-powered-email-draft-generation': { loader: () => import('./AiEmailDraftGenerator.tsx'), exportName: 'AiEmailDraftGenerator' },
    'ai-powered-research-assistant': { loader: () => import('./AiPoweredResearchAssistant.tsx'), exportName: 'AiPoweredResearchAssistant' },
    'automated-content-translation': { loader: () => import('./AutomatedContentTranslation.tsx'), exportName: 'AutomatedContentTranslation' },
    'generate-presentation-outline': { loader: () => import('./GeneratePresentationOutline.tsx'), exportName: 'GeneratePresentationOutline' },
    'ai-driven-project-risk-assessment': { loader: () => import('./AiDrivenProjectRisk.tsx'), exportName: 'AiDrivenProjectRisk' },
    'automated-meeting-transcription': { loader: () => import('./AutomatedMeetingTranscription.tsx'), exportName: 'AutomatedMeetingTranscription' },
    'ai-powered-brainstorm-ideas-assistant': { loader: () => import('./AiBrainstormingAssistant.tsx'), exportName: 'AiBrainstormingAssistant' },
    'generate-user-stories-command': { loader: () => import('./GenerateUserStories.tsx'), exportName: 'GenerateUserStories' },
    'automated-report-generation': { loader: () => import('./AutomatedReportGeneration.tsx'), exportName: 'AutomatedReportGeneration' },
    'generate-marketing-copy': { loader: () => import('./GenerateMarketingCopy.tsx'), exportName: 'GenerateMarketingCopy' },
    'automated-dependency-vulnerability-scanning': { loader: () => import('./AutomatedDependencyScanning.tsx'), exportName: 'AutomatedDependencyScanning' },
    'generate-deployment-script': { loader: () => import('./GenerateDeploymentScript.tsx'), exportName: 'GenerateDeploymentScript' },
    'automated-accessibility-audit-ui': { loader: () => import('./AutomatedAccessibilityAudit.tsx'), exportName: 'AutomatedAccessibilityAudit' },
    'automated-project-onboarding': { loader: () => import('./AutomatedProjectOnboarding.tsx'), exportName: 'AutomatedProjectOnboarding' },
    'ai-powered-generate-a-recipe': { loader: () => import('./GenerateRecipe.tsx'), exportName: 'GenerateRecipe' },
    'ai-driven-generate-a-business-plan': { loader: () => import('./GenerateBusinessPlan.tsx'), exportName: 'GenerateBusinessPlan' },
    'ai-driven-bias-detection': { loader: () => import('./AiDrivenBiasDetection.tsx'), exportName: 'AiDrivenBiasDetection' },
    'generate-api-documentation': { loader: () => import('./AutomatedApiDocumentation.tsx'), exportName: 'AutomatedApiDocumentation' },
    'automated-code-commenting': { loader: () => import('./AutomatedCodeCommenting.tsx'), exportName: 'AutomatedCodeCommenting' },
    'automated-environment-setup-assistant': { loader: () => import('./AutomatedEnvironmentSetup.tsx'), exportName: 'AutomatedEnvironmentSetup' },
    // Second batch of 50 new features
    'semantic-search-with-natural-language-filters': { loader: () => import('./SemanticSearchWithNaturalLanguageFilters.tsx'), exportName: 'SemanticSearchWithNaturalLanguageFilters' },
    'content-based-deduplication': { loader: () => import('./ContentBasedDeduplication.tsx'), exportName: 'ContentBasedDeduplication' },
    'predictive-file-placement': { loader: () => import('./PredictiveFilePlacement.tsx'), exportName: 'PredictiveFilePlacement' },
    'semantic-code-search': { loader: () => import('./SemanticCodeSearch.tsx'), exportName: 'SemanticCodeSearch' },
    'ai-driven-api-client-generation': { loader: () => import('./AiDrivenApiClientGeneration.tsx'), exportName: 'AiDrivenApiClientGeneration' },
    'ai-driven-data-transformation-pipelines': { loader: () => import('./AiDataTransformation.tsx'), exportName: 'AiDataTransformation' },
    'ai-driven-meeting-agenda-generation': { loader: () => import('./AiDrivenMeetingAgendaGeneration.tsx'), exportName: 'AiDrivenMeetingAgendaGeneration' },
    'ai-driven-time-management-suggestions': { loader: () => import('./AiDrivenTimeManagementSuggestions.tsx'), exportName: 'AiDrivenTimeManagementSuggestions' },
    'ai-driven-learning-path-suggestions': { loader: () => import('./AiDrivenLearningPathSuggestions.tsx'), exportName: 'AiDrivenLearningPathSuggestions' },
    'ai-driven-project-budget-estimation': { loader: () => import('./AiDrivenProjectBudgetEstimation.tsx'), exportName: 'AiDrivenProjectBudgetEstimation' },
    'ai-powered-what-if-scenario-analysis': { loader: () => import('./AiPoweredWhatIfScenarioAnalysis.tsx'), exportName: 'AiPoweredWhatIfScenarioAnalysis' },
    'ai-driven-resource-optimization': { loader: () => import('./AiDrivenResourceOptimization.tsx'), exportName: 'AiDrivenResourceOptimization' },
    'ai-driven-backup-strategy': { loader: () => import('./AiDrivenBackupStrategy.tsx'), exportName: 'AiDrivenBackupStrategy' },
    'ai-powered-system-health-monitoring': { loader: () => import('./AiPoweredSystemHealthMonitoring.tsx'), exportName: 'AiPoweredSystemHealthMonitoring' },
    'ai-driven-data-migration': { loader: () => import('./AiDrivenDataMigration.tsx'), exportName: 'AiDrivenDataMigration' },
    'ai-powered-smart-notifications': { loader: () => import('./AiPoweredSmartNotifications.tsx'), exportName: 'AiPoweredSmartNotifications' },
    'ai-driven-data-privacy-impact-assessment': { loader: () => import('./AiDataPrivacyImpact.tsx'), exportName: 'AiDataPrivacyImpact' },
    'ai-driven-cost-optimization-for-cloud': { loader: () => import('./AiDrivenCostOptimizationForCloud.tsx'), exportName: 'AiDrivenCostOptimizationForCloud' },
    'personalized-ai-model-fine-tuning': { loader: () => import('./PersonalizedAiModelFineTuning.tsx'), exportName: 'PersonalizedAiModelFineTuning' },
    'ai-driven-prompt-engineering-assistant': { loader: () => import('./AiDrivenPromptEngineeringAssistant.tsx'), exportName: 'AiDrivenPromptEngineeringAssistant' },
    'explain-ai-reasoning-feature': { loader: () => import('./ExplainAiReasoningFeature.tsx'), exportName: 'ExplainAiReasoningFeature' },
    'what-can-ai-do-here-contextual-help': { loader: () => import('./WhatCanAiDoHereContextualHelp.tsx'), exportName: 'WhatCanAiDoHereContextualHelp' },
    'explain-this-ai-concept-glossary': { loader: () => import('./ExplainThisAiConceptGlossary.tsx'), exportName: 'ExplainThisAiConceptGlossary' },
    'ai-driven-collaborative-document-editing': { loader: () => import('./AiDrivenCollaborativeDocumentEditing.tsx'), exportName: 'AiDrivenCollaborativeDocumentEditing' },
    'generate-team-update-command': { loader: () => import('./GenerateTeamUpdateCommand.tsx'), exportName: 'GenerateTeamUpdateCommand' },
    'ai-driven-conflict-resolution-for-merges': { loader: () => import('./AiDrivenConflictResolutionForMerges.tsx'), exportName: 'AiDrivenConflictResolutionForMerges' },
    'ai-powered-who-should-review-this-suggestion': { loader: () => import('./AiPoweredWhoShouldReviewThisSuggestion.tsx'), exportName: 'AiPoweredWhoShouldReviewThisSuggestion' },
    'generate-project-brief-command': { loader: () => import('./GenerateProjectBriefCommand.tsx'), exportName: 'GenerateProjectBriefCommand' },
    'ai-driven-creative-remix-tool': { loader: () => import('./AiDrivenCreativeRemixTool.tsx'), exportName: 'AiDrivenCreativeRemixTool' },
    'generate-music-sound-effects': { loader: () => import('./GenerateMusicSoundEffects.tsx'), exportName: 'GenerateMusicSoundEffects' },
    'ai-driven-generate-3d-model': { loader: () => import('./AiDrivenGenerate3dModel.tsx'), exportName: 'AiDrivenGenerate3dModel' },
    'generate-a-poem-song-lyrics': { loader: () => import('./GenerateAPoemSongLyrics.tsx'), exportName: 'GenerateAPoemSongLyrics' },
    'automated-generate-a-marketing-campaign': { loader: () => import('./AutomatedGenerateAMarketingCampaign.tsx'), exportName: 'AutomatedGenerateAMarketingCampaign' },
    'ai-powered-generate-a-research-paper-outline': { loader: () => import('./AiPoweredGenerateAResearchPaperOutline.tsx'), exportName: 'AiPoweredGenerateAResearchPaperOutline' },
    'ai-driven-privacy-advisor-for-file-sharing': { loader: () => import('./AiDrivenPrivacyAdvisorForFileSharing.tsx'), exportName: 'AiDrivenPrivacyAdvisorForFileSharing' },
    'ai-powered-ethical-dilemma-simulator': { loader: () => import('./AiPoweredEthicalDilemmaSimulator.tsx'), exportName: 'AiPoweredEthicalDilemmaSimulator' },
    // Final batch of 50 features
    'ai-driven-tutorial-onboarding': { loader: () => import('./AiDrivenTutorialOnboarding.tsx'), exportName: 'AiDrivenTutorialOnboarding' },
    'whats-new-here-summary': { loader: () => import('./WhatsNewHereSummary.tsx'), exportName: 'WhatsNewHereSummary' },
    'ai-driven-feedback-loop-for-model-improvement': { loader: () => import('./AiDrivenFeedbackLoopForModelImprovement.tsx'), exportName: 'AiDrivenFeedbackLoopForModelImprovement' },
    'personalized-ui-theme-generation': { loader: () => import('./PersonalizedUiThemeGeneration.tsx'), exportName: 'PersonalizedUiThemeGeneration' },
    'ai-powered-walkthrough-for-complex-features': { loader: () => import('./AiPoweredWalkthroughForComplexFeatures.tsx'), exportName: 'AiPoweredWalkthroughForComplexFeatures' },
    'ai-driven-zen-mode-customization': { loader: () => import('./AiDrivenZenModeCustomization.tsx'), exportName: 'AiDrivenZenModeCustomization' },
    'explain-this-feature-ai-help': { loader: () => import('./ExplainThisFeatureAiHelp.tsx'), exportName: 'ExplainThisFeatureAiHelp' },
    'find-orphaned-files-ai-scan': { loader: () => import('./FindOrphanedFilesAiScan.tsx'), exportName: 'FindOrphanedFilesAiScan' },
    'whats-taking-up-space-analysis': { loader: () => import('./WhatsTakingUpSpaceAnalysis.tsx'), exportName: 'WhatsTakingUpSpaceAnalysis' },
    'optimize-storage-for-project': { loader: () => import('./OptimizeStorageForProject.tsx'), exportName: 'OptimizeStorageForProject' },
    'automated-meeting-note-sharing-and-summarization': { loader: () => import('./AutomatedMeetingNoteSharingAndSummarization.tsx'), exportName: 'AutomatedMeetingNoteSharingAndSummarization' },
    'ai-powered-find-collaborators-assistant': { loader: () => import('./AiPoweredFindCollaboratorsAssistant.tsx'), exportName: 'AiPoweredFindCollaboratorsAssistant' },
    'ai-driven-team-communication-optimization': { loader: () => import('./AiDrivenTeamCommunicationOptimization.tsx'), exportName: 'AiDrivenTeamCommunicationOptimization' },
    'automated-feedback-aggregation-and-summarization': { loader: () => import('./AutomatedFeedbackAggregationAndSummarization.tsx'), exportName: 'AutomatedFeedbackAggregationAndSummarization' },
    'automated-generate-game-assets': { loader: () => import('./AutomatedGenerateGameAssets.tsx'), exportName: 'AutomatedGenerateGameAssets' },
    'user-configurable-ai-guardrails': { loader: () => import('./UserConfigurableAiGuardrails.tsx'), exportName: 'UserConfigurableAiGuardrails' },
    'ai-powered-content-authenticity-verification': { loader: () => import('./AiPoweredContentAuthenticityVerification.tsx'), exportName: 'AiPoweredContentAuthenticityVerification' },
    'automated-ai-model-explainability-reports': { loader: () => import('./AutomatedAiModelExplainabilityReports.tsx'), exportName: 'AutomatedAiModelExplainabilityReports' },
    'settings': { loader: () => import('../SettingsView.tsx'), exportName: 'SettingsView' },
    // Round 1 of 50 new features
    'cross-application-command-integration': { loader: () => import('./CrossApplicationCommandIntegration.tsx'), exportName: 'CrossApplicationCommandIntegration' },
    'undo-last-ai-action': { loader: () => import('./UndoLastAiAction.tsx'), exportName: 'UndoLastAiAction' },
    'personalized-shortcut-learning': { loader: () => import('./PersonalizedShortcutLearning.tsx'), exportName: 'PersonalizedShortcutLearning' },
    'ai-driven-file-access-permissions': { loader: () => import('./AiDrivenFileAccessPermissions.tsx'), exportName: 'AiDrivenFileAccessPermissions' },
    'clean-up-downloads-assistant': { loader: () => import('./CleanUpDownloadsAssistant.tsx'), exportName: 'CleanUpDownloadsAssistant' },
    'cross-device-file-sync-suggestions': { loader: () => import('./CrossDeviceFileSyncSuggestions.tsx'), exportName: 'CrossDeviceFileSyncSuggestions' },
    'ai-driven-file-encryption-recommendations': { loader: () => import('./AiDrivenFileEncryptionRecommendations.tsx'), exportName: 'AiDrivenFileEncryptionRecommendations' },
    'ai-powered-file-sharing-recommendations': { loader: () => import('./AiPoweredFileSharingRecommendations.tsx'), exportName: 'AiPoweredFileSharingRecommendations' },
    'ai-driven-file-access-auditing': { loader: () => import('./AiDrivenFileAccessAuditing.tsx'), exportName: 'AiDrivenFileAccessAuditing' },
    'real-time-ai-code-refactoring': { loader: () => import('./RealTimeAiCodeRefactoring.tsx'), exportName: 'RealTimeAiCodeRefactoring' },
    'ai-powered-code-completion': { loader: () => import('./AiPoweredCodeCompletion.tsx'), exportName: 'AiPoweredCodeCompletion' },
    'ai-driven-file-system-health-check': { loader: () => import('./AiDrivenFileSystemHealthCheck.tsx'), exportName: 'AiDrivenFileSystemHealthCheck' },
    'automated-file-system-indexing-and-optimization': { loader: () => import('./AutomatedFileSystemIndexing.tsx'), exportName: 'AutomatedFileSystemIndexing' },
    'ai-powered-predictive-disk-space-management': { loader: () => import('./AiPoweredPredictiveDiskSpaceManagement.tsx'), exportName: 'AiPoweredPredictiveDiskSpaceManagement' },
    'ai-driven-file-system-anomaly-detection': { loader: () => import('./AiDrivenFileSystemAnomalyDetection.tsx'), exportName: 'AiDrivenFileSystemAnomalyDetection' },
    'automated-file-system-cleanup-scheduled': { loader: () => import('./AutomatedFileSystemCleanup.tsx'), exportName: 'AutomatedFileSystemCleanup' },
    'ai-driven-file-system-performance-benchmarking': { loader: () => import('./AiDrivenFileSystemPerformanceBenchmarking.tsx'), exportName: 'AiDrivenFileSystemPerformanceBenchmarking' },
    'automated-logical-defragmentation-logical': { loader: () => import('./AutomatedLogicalDefragmentation.tsx'), exportName: 'AutomatedLogicalDefragmentation' },
    'ai-driven-adaptive-ui-layouts': { loader: () => import('./AiDrivenAdaptiveUiLayouts.tsx'), exportName: 'AiDrivenAdaptiveUiLayouts' },
    'automated-ui-performance-optimization': { loader: () => import('./AutomatedUiPerformanceOptimization.tsx'), exportName: 'AutomatedUiPerformanceOptimization' },
    'dark-mode-ai-driven-dynamic-adjustment': { loader: () => import('./DarkModeAiDynamicAdjustment.tsx'), exportName: 'DarkModeAiDynamicAdjustment' },
    'ai-driven-ethical-ai-guidelines-enforcement': { loader: () => import('./EthicalAiGuidelinesEnforcement.tsx'), exportName: 'EthicalAiGuidelinesEnforcement' },
    'automated-ai-model-performance-monitoring': { loader: () => import('./AiModelPerformanceMonitoring.tsx'), exportName: 'AiModelPerformanceMonitoring' },
    'automated-ai-model-versioning-and-rollback': { loader: () => import('./AiModelVersioningAndRollback.tsx'), exportName: 'AiModelVersioningAndRollback' },
    'ai-incident-post-mortem-generator': { loader: () => import('./AiIncidentPostmortemGenerator.tsx'), exportName: 'AiIncidentPostmortemGenerator' },
    'terraform-iac-generator': { loader: () => import('./TerraformIaCGenerator.tsx'), exportName: 'TerraformIaCGenerator' },
    'ci-cd-pipeline-optimizer': { loader: () => import('./CiCdPipelineOptimizer.tsx'), exportName: 'CiCdPipelineOptimizer' },
    'k8s-manifest-generator': { loader: () => import('./K8sManifestGenerator.tsx'), exportName: 'K8sManifestGenerator' },
    'cloud-architecture-diagram-generator': { loader: () => import('./CloudArchitectureDiagramGenerator.tsx'), exportName: 'CloudArchitectureDiagramGenerator' },
    'log-anomaly-detection': { loader: () => import('./LogAnomalyDetection.tsx'), exportName: 'LogAnomalyDetection' },
    'slo-calculator-reporter': { loader: () => import('./SloCalculatorReporter.tsx'), exportName: 'SloCalculatorReporter' },
    'on-call-schedule-generator': { loader: () => import('./OnCallScheduleGenerator.tsx'), exportName: 'OnCallScheduleGenerator' },
    'disaster-recovery-plan-generator': { loader: () => import('./DisasterRecoveryPlanGenerator.tsx'), exportName: 'DisasterRecoveryPlanGenerator' },
    'cloud-cost-anomaly-detection': { loader: () => import('./CloudCostAnomalyDetection.tsx'), exportName: 'CloudCostAnomalyDetection' },
    'microservice-decomposer': { loader: () => import('./MicroserviceDecomposer.tsx'), exportName: 'MicroserviceDecomposer' },
    'api-contract-tester': { loader: () => import('./ApiContractTester.tsx'), exportName: 'ApiContractTester' },
    'code-to-architectural-pattern-identifier': { loader: () => import('./ArchitecturalPatternIdentifier.tsx'), exportName: 'ArchitecturalPatternIdentifier' },
    'system-design-interview-simulator': { loader: () => import('./SystemDesignInterviewSimulator.tsx'), exportName: 'SystemDesignInterviewSimulator' },
    'code-smell-refactorer': { loader: () => import('./CodeSmellRefactorer.tsx'), exportName: 'CodeSmellRefactorer' },
    'legacy-code-modernizer': { loader: () => import('./LegacyCodeModernizer.tsx'), exportName: 'LegacyCodeModernizer' },
    'graphql-schema-generator': { loader: () => import('./GraphQLSchemaGenerator.tsx'), exportName: 'GraphQLSchemaGenerator' },
    'ai-powered-ast-code-search': { loader: () => import('./AstBasedCodeSearch.tsx'), exportName: 'AstBasedCodeSearch' },
    'event-storming-assistant': { loader: () => import('./EventStormingAssistant.tsx'), exportName: 'EventStormingAssistant' },
    'e2e-test-script-generator': { loader: () => import('./E2eTestScriptGenerator.tsx'), exportName: 'E2eTestScriptGenerator' },
    'competitive-analysis-generator': { loader: () => import('./CompetitiveAnalysisGenerator.tsx'), exportName: 'CompetitiveAnalysisGenerator' },
    'user-persona-generator': { loader: () => import('./UserPersonaGenerator.tsx'), exportName: 'UserPersonaGenerator' },
    'ab-test-hypothesis-generator': { loader: () => import('./AbTestHypothesisGenerator.tsx'), exportName: 'AbTestHypothesisGenerator' },
    'product-roadmap-generator': { loader: () => import('./ProductRoadmapGenerator.tsx'), exportName: 'ProductRoadmapGenerator' },
    'swot-analysis-generator': { loader: () => import('./SwotAnalysisGenerator.tsx'), exportName: 'SwotAnalysisGenerator' },
    'press-release-writer': { loader: () => import('./PressReleaseWriter.tsx'), exportName: 'PressReleaseWriter' },
    'investor-pitch-deck-outline': { loader: () => import('./InvestorPitchDeckOutline.tsx'), exportName: 'InvestorPitchDeckOutline' },
    'market-sizing-estimator': { loader: () => import('./MarketSizingEstimator.tsx'), exportName: 'MarketSizingEstimator' },
    'gtm-strategy-brainstormer': { loader: () => import('./GtmStrategyBrainstormer.tsx'), exportName: 'GtmStrategyBrainstormer' },
    'feature-prioritization-assistant': { loader: () => import('./FeaturePrioritizationAssistant.tsx'), exportName: 'FeaturePrioritizationAssistant' },
    'video-script-writer': { loader: () => import('./VideoScriptWriter.tsx'), exportName: 'VideoScriptWriter' },
    'podcast-episode-planner': { loader: () => import('./PodcastEpisodePlanner.tsx'), exportName: 'PodcastEpisodePlanner' },
    'fictional-world-builder': { loader: () => import('./FictionalWorldBuilder.tsx'), exportName: 'FictionalWorldBuilder' },
    'game-design-document-drafter': { loader: () => import('./GameDesignDocumentDrafter.tsx'), exportName: 'GameDesignDocumentDrafter' },
    'ad-copy-generator': { loader: () => import('./AdCopyGenerator.tsx'), exportName: 'AdCopyGenerator' },
    'seo-content-brief-generator': { loader: () => import('./SeoContentBriefGenerator.tsx'), exportName: 'SeoContentBriefGenerator' },
    'brand-voice-tone-analyzer': { loader: () => import('./BrandVoiceToneAnalyzer.tsx'), exportName: 'BrandVoiceToneAnalyzer' },
    'legal-document-summarizer': { loader: () => import('./LegalDocumentSummarizer.tsx'), exportName: 'LegalDocumentSummarizer' },
    'resume-cover-letter-builder': { loader: () => import('./ResumeCoverLetterBuilder.tsx'), exportName: 'ResumeCoverLetterBuilder' },
    'speech-writer': { loader: () => import('./SpeechWriter.tsx'), exportName: 'SpeechWriter' },
    'jupyter-notebook-auto-documenter': { loader: () => import('./JupyterNotebookAutoDocumenter.tsx'), exportName: 'JupyterNotebookAutoDocumenter' },
    'sql-optimizer': { loader: () => import('./SqlOptimizer.tsx'), exportName: 'SqlOptimizer' },
    'data-exploration-assistant': { loader: () => import('./DataExplorationAssistant.tsx'), exportName: 'DataExplorationAssistant' },
    'statistical-model-suggester': { loader: () => import('./StatisticalModelSuggester.tsx'), exportName: 'StatisticalModelSuggester' },
    'sentiment-trend-analysis': { loader: () => import('./SentimentTrendAnalysis.tsx'), exportName: 'SentimentTrendAnalysis' },
    'data-cleaning-script-generator': { loader: () => import('./DataCleaningScriptGenerator.tsx'), exportName: 'DataCleaningScriptGenerator' },
    'feature-engineering-suggester': { loader: () => import('./FeatureEngineeringSuggester.tsx'), exportName: 'FeatureEngineeringSuggester' },
    'model-evaluation-report-generator': { loader: () => import('./ModelEvaluationReportGenerator.tsx'), exportName: 'ModelEvaluationReportGenerator' },
    'ai-ethics-statement-drafter': { loader: () => import('./AiEthicsStatementDrafter.tsx'), exportName: 'AiEthicsStatementDrafter' },
    'synthetic-data-generator': { loader: () => import('./SyntheticDataGenerator.tsx'), exportName: 'SyntheticDataGenerator' },
};

// Dynamically build the component map, using placeholders for unimplemented features.
const componentMap: Record<string, React.FC<any>> = {};
RAW_FEATURES.forEach(feature => {
    if (implementedFeatures[feature.id]) {
        const { loader, exportName } = implementedFeatures[feature.id];
        componentMap[feature.id] = lazyWithRetry(loader, exportName);
    } else {
        // This is now a fallback for any new features added to constants.ts without an implementation.
        // During this major update, every feature should have an implementation.
        console.warn(`Feature "${feature.name}" (${feature.id}) is not implemented. A placeholder will be used.`);
        // To prevent crashes, you can add the placeholder back if needed, but the goal is full implementation.
        // componentMap[feature.id] = PlaceholderFeature;
        // For this release, we assume all are implemented. If one is missing, it will error, which is intended.
    }
});

// Map feature IDs to specific AI configurations
const aiConfigMap: Record<string, Feature['aiConfig']> = {
    'ai-code-explainer': { model: 'gemini-2.5-flash' },
    'ai-feature-builder': { model: 'gemini-2.5-flash' },
    'ai-commit-generator': { model: 'gemini-2.5-flash' },
    'ai-unit-test-generator': { model: 'gemini-2.5-flash' },
    'regex-sandbox': { model: 'gemini-2.5-flash' },
    'screenshot-to-component': { model: 'gemini-2.5-flash' },
    'theme-designer': { model: 'gemini-2.5-flash' },
    'ai-style-transfer': { model: 'gemini-2.5-flash' },
    'ai-coding-challenge': { model: 'gemini-2.5-flash' },
    'code-review-bot': { model: 'gemini-2.5-flash' },
    'ai-pull-request-assistant': { model: 'gemini-2.5-flash' },
    'ai-code-migrator': { model: 'gemini-2.5-flash' },
    'visual-git-tree': { model: 'gemini-2.5-flash' },
    'worker-thread-debugger': { model: 'gemini-2.5-flash' },
    'ai-command-center': { model: 'gemini-2.5-flash' },
    // FIX: Use the correct model for image generation
    'ai-image-generator': { model: 'imagen-4.0-generate-001' },
    'audio-to-code': { model: 'gemini-2.5-flash' },
    'color-palette-generator': { model: 'gemini-2.5-flash' },
    'xbrl-converter': { model: 'gemini-2.5-flash' },
    'digital-whiteboard': { model: 'gemini-2.5-flash' },
    'project-explorer': { model: 'gemini-2.5-flash' },
    'ai-story-scaffolding': { model: 'gemini-2.5-flash' }, // Add config for the new feature
    'omnistruct-framework': { model: 'gemini-2.5-flash' },
};

export const ALL_FEATURES: Feature[] = RAW_FEATURES.map(feature => ({
    ...feature,
    component: componentMap[feature.id],
    aiConfig: aiConfigMap[feature.id],
})).filter(f => f.component); // Filter out any features that failed to get a component

export const FEATURES_MAP = new Map(ALL_FEATURES.map(f => [f.id, f]));